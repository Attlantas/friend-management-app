{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:5001/api/\",\n  // Your backend base URL\n  withCredentials: true\n});\n\n// Add an interceptor to attach the token to every request\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\"); // Get token\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // Attach token\n  }\n  return config;\n}, error => Promise.reject(error) // Handle request errors\n);\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","sessionStorage","headers","Authorization","error","Promise","reject"],"sources":["/Users/kthulu/PersonalDevelopment/friend-management-system/frontend/src/api/axios.js"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:5001/api/\", // Your backend base URL\n  withCredentials: true,\n});\n\n// Add an interceptor to attach the token to every request\ninstance.interceptors.request.use(\n  (config) => {\n    const token =\n      localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\"); // Get token\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`; // Attach token\n    }\n    return config;\n  },\n  (error) => Promise.reject(error) // Handle request errors\n);\n\nexport default instance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,4BAA4B;EAAE;EACvCC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GACTC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEpE,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,UAAUL,KAAK,EAAE,CAAC,CAAC;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACAO,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;AACnC,CAAC;AAED,eAAed,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}