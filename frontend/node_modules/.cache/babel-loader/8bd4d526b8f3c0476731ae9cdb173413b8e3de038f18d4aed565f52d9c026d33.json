{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { toast } from 'react-toastify';\nimport { WEBSOCKET_SERVER_URL } from '../constants';\nconst showNotification = (message, type = 'info') => {\n  toast[type](message, {\n    position: 'top-right',\n    autoClose: 5000,\n    // Auto-hide after 5 seconds\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true\n  });\n};\nexport const socket = io(WEBSOCKET_SERVER_URL, {\n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 3000,\n  withCredentials: true\n});\nexport const setupSocketListeners = (dispatch, userId) => {\n  if (!socket) return;\n  socket.on('connect', () => {\n    console.log('Connected to WebSocket ‚úÖ');\n    socket.emit('user_online', userId); // Inform server that user is online\n  });\n  socket.on('friend_request', request => {\n    console.log('New Friend Request üì©', request);\n    dispatch({\n      type: 'friends/sendFriendRequestSuccess',\n      payload: request\n    });\n    showNotification(`üì© New friend request from ${request.name}`);\n  });\n  socket.on('friend_request_accepted', friend => {\n    console.log('Friend Added üéâ', friend);\n    dispatch({\n      type: 'friends/acceptFriendRequestSuccess',\n      payload: friend\n    });\n    showNotification(`üì© ${friend.name} has accepted your friend request`);\n  });\n  socket.on('friend_removed', removedFriendId => {\n    console.log('Friend Removed ‚ùå', removedFriendId);\n    dispatch({\n      type: 'friends/removeFriendSuccess',\n      payload: removedFriendId\n    });\n  });\n  socket.on('disconnect', () => {\n    console.log('Disconnected from WebSocket ‚ùå');\n  });\n\n  // Emit `user_offline` when user closes the tab\n  window.addEventListener('beforeunload', () => {\n    if (userId) {\n      socket.emit('user_offline', userId);\n      console.log(`User ${userId} is offline (Tab Closed) ‚ùå`);\n    }\n  });\n};","map":{"version":3,"names":["io","toast","WEBSOCKET_SERVER_URL","showNotification","message","type","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","socket","transports","reconnectionAttempts","reconnectionDelay","withCredentials","setupSocketListeners","dispatch","userId","on","console","log","emit","request","payload","name","friend","removedFriendId","window","addEventListener"],"sources":["/Users/kthulu/PersonalDevelopment/friend-management-system/frontend/src/utils/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { toast } from 'react-toastify';\nimport {WEBSOCKET_SERVER_URL} from '../constants';\n\nconst showNotification = (message, type = 'info') => {\n  toast[type](message, {\n    position: 'top-right',\n    autoClose: 5000, // Auto-hide after 5 seconds\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n}\n\nexport const socket = io(WEBSOCKET_SERVER_URL, {\n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 3000,\n  withCredentials: true\n});\n\nexport const setupSocketListeners = (dispatch, userId) => {\n  if (!socket) return;\n\n  socket.on('connect', () => {\n    console.log('Connected to WebSocket ‚úÖ');\n    socket.emit('user_online', userId); // Inform server that user is online\n  });\n\n  socket.on('friend_request', (request) => {\n    console.log('New Friend Request üì©', request);\n    dispatch({type: 'friends/sendFriendRequestSuccess', payload: request});\n\n    showNotification(`üì© New friend request from ${request.name}`);\n  });\n\n  socket.on('friend_request_accepted', (friend) => {\n    console.log('Friend Added üéâ', friend);\n    dispatch({ type: 'friends/acceptFriendRequestSuccess', payload: friend });\n\n    showNotification(`üì© ${friend.name} has accepted your friend request`);\n  });\n\n  socket.on('friend_removed', (removedFriendId) => {\n    console.log('Friend Removed ‚ùå', removedFriendId);\n    dispatch({ type: 'friends/removeFriendSuccess', payload: removedFriendId });\n  });\n\n  socket.on('disconnect', () => {\n    console.log('Disconnected from WebSocket ‚ùå');\n  });\n\n  // Emit `user_offline` when user closes the tab\n  window.addEventListener('beforeunload', () => {\n    if (userId) {\n      socket.emit('user_offline', userId);\n      console.log(`User ${userId} is offline (Tab Closed) ‚ùå`);\n    }\n  });\n};\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAAQC,oBAAoB,QAAO,cAAc;AAEjD,MAAMC,gBAAgB,GAAGA,CAACC,OAAO,EAAEC,IAAI,GAAG,MAAM,KAAK;EACnDJ,KAAK,CAACI,IAAI,CAAC,CAACD,OAAO,EAAE;IACnBE,QAAQ,EAAE,WAAW;IACrBC,SAAS,EAAE,IAAI;IAAE;IACjBC,eAAe,EAAE,KAAK;IACtBC,YAAY,EAAE,IAAI;IAClBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE;EACb,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGZ,EAAE,CAACE,oBAAoB,EAAE;EAC7CW,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,oBAAoB,EAAE,CAAC;EACvBC,iBAAiB,EAAE,IAAI;EACvBC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;EACxD,IAAI,CAACP,MAAM,EAAE;EAEbA,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCV,MAAM,CAACW,IAAI,CAAC,aAAa,EAAEJ,MAAM,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC;EAEFP,MAAM,CAACQ,EAAE,CAAC,gBAAgB,EAAGI,OAAO,IAAK;IACvCH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,OAAO,CAAC;IAC7CN,QAAQ,CAAC;MAACb,IAAI,EAAE,kCAAkC;MAAEoB,OAAO,EAAED;IAAO,CAAC,CAAC;IAEtErB,gBAAgB,CAAC,8BAA8BqB,OAAO,CAACE,IAAI,EAAE,CAAC;EAChE,CAAC,CAAC;EAEFd,MAAM,CAACQ,EAAE,CAAC,yBAAyB,EAAGO,MAAM,IAAK;IAC/CN,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEK,MAAM,CAAC;IACtCT,QAAQ,CAAC;MAAEb,IAAI,EAAE,oCAAoC;MAAEoB,OAAO,EAAEE;IAAO,CAAC,CAAC;IAEzExB,gBAAgB,CAAC,MAAMwB,MAAM,CAACD,IAAI,mCAAmC,CAAC;EACxE,CAAC,CAAC;EAEFd,MAAM,CAACQ,EAAE,CAAC,gBAAgB,EAAGQ,eAAe,IAAK;IAC/CP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,eAAe,CAAC;IAChDV,QAAQ,CAAC;MAAEb,IAAI,EAAE,6BAA6B;MAAEoB,OAAO,EAAEG;IAAgB,CAAC,CAAC;EAC7E,CAAC,CAAC;EAEFhB,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,CAAC;;EAEF;EACAO,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,MAAM;IAC5C,IAAIX,MAAM,EAAE;MACVP,MAAM,CAACW,IAAI,CAAC,cAAc,EAAEJ,MAAM,CAAC;MACnCE,OAAO,CAACC,GAAG,CAAC,QAAQH,MAAM,4BAA4B,CAAC;IACzD;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}